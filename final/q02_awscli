#!/usr/bin/env bash
set -o nounset # Treat unset variables as an error

declare -r script_dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)" #can't symlink this script
declare -r state_file="$script_dir/state_file"
declare -r vpc_cidr='192.168.0.0/16'
declare -r web_subnet_cidr='192.168.254.0/24'
declare -r web_subnet_az='us-west-2a'
declare private_subnet_cidr="192.168.253.0/24"
declare private_subnet_az="us-west-2a"
declare admin_cidr="75.157.0.0/16"
declare open_cidr="0.0.0.0/0"
declare -r key_pair_name="acit_4640_202310"
declare -r image_id='ami-07508687309ac4ba5'
declare -r instance_type="t2.micro"

declare vpc_id
vpc_id=$(aws ec2 create-vpc \
    --cidr-block "${vpc_cidr}" \
    --query Vpc.VpcId \
    --output text)

aws ec2 create-tags \
    --resources "${vpc_id}" \
    --tags Key=Name,Value="exam_vpc"

echo "exam_vpc_id=${vpc_id}" >"${state_file}"

declare web_subnet_id
web_subnet_id=$(aws ec2 create-subnet \
    --vpc-id "${vpc_id}" \
    --availability-zone "${web_subnet_az}" \
    --cidr-block "${web_subnet_cidr}" \
    --query Subnet.SubnetId \
    --output text)

aws ec2 create-tags \
    --resources "${web_subnet_id}" \
    --tags Key=Name,Value="exam_web_subnet"

echo "exam_web_subnet_id=${web_subnet_id}" >>"${state_file}"

aws ec2 modify-subnet-attribute --subnet-id "${web_subnet_id}" --map-public-ip-on-launch

declare private_subnet_id
private_subnet_id=$(aws ec2 create-subnet \
    --vpc-id "${vpc_id}" \
    --availability-zone "${private_subnet_az}" \
    --cidr-block "${private_subnet_cidr}" \
    --query Subnet.SubnetId \
    --output text)

aws ec2 create-tags \
    --resources "${private_subnet_id}" \
    --tags Key=Name,Value="exam_private_subnet"

echo "exam_private_subnet_id=${private_subnet_id}" >>"${state_file}"

declare gateway_id
gateway_id=$(aws ec2 create-internet-gateway \
    --query InternetGateway.InternetGatewayId \
    --output text)

aws ec2 create-tags \
    --resources "${gateway_id}" \
    --tags Key=Name,Value="exam_gateway"

aws ec2 attach-internet-gateway \
    --internet-gateway-id "${gateway_id}" \
    --vpc-id "${vpc_id}"

echo "exam_gateway_id=${gateway_id}" >>"${state_file}"

declare route_table_id
route_table_id=$(aws ec2 create-route-table \
    --vpc-id "${vpc_id}" \
    --query RouteTable.RouteTableId \
    --output text)

aws ec2 create-tags \
    --resources "${route_table_id}" \
    --tags Key=Name,Value="exam_route_table"

echo "exam_route_table_id=${route_table_id}" >>"${state_file}"

aws ec2 associate-route-table \
    --route-table-id "${route_table_id}" \
    --subnet-id "${web_subnet_id}" \
    --query AssociationId \
    --output text

aws ec2 associate-route-table \
    --route-table-id "${route_table_id}" \
    --subnet-id "${private_subnet_id}" \
    --query AssociationId \
    --output text

aws ec2 create-route \
    --route-table-id "${route_table_id}" \
    --destination-cidr-block "0.0.0.0/0" \
    --gateway-id "${gateway_id}"

declare web_security_group_id
web_security_group_id=$(aws ec2 create-security-group \
    --group-name "exam_web_security_group" \
    --description "exam_web_security_group" \
    --vpc-id "${vpc_id}" \
    --query GroupId \
    --output text)

echo "exam_web_security_group_id=${web_security_group_id}" >>state_file

declare private_security_group_id
private_security_group_id=$(aws ec2 create-security-group \
    --group-name "exam_private_security_group" \
    --description "exam_private_security_group" \
    --vpc-id "${vpc_id}" \
    --query GroupId \
    --output text)

echo "exam_private_security_group_id=${private_security_group_id}" >>state_file

aws ec2 authorize-security-group-ingress \
    --group-id "${web_security_group_id}" \
    --protocol tcp \
    --port 22 \
    --cidr "${admin_cidr}" \
    --output text

aws ec2 authorize-security-group-ingress \
    --group-id "${web_security_group_id}" \
    --protocol tcp \
    --port 443 --cidr "${open_cidr}" \
    --output text

aws ec2 authorize-security-group-ingress \
    --group-id "${private_security_group_id}" \
    --source-group "${web_security_group_id}" \
    --protocol all \
    --output text

declare web_ec2_id
web_ec2_id=$(aws ec2 run-instances \
    --image-id "${image_id}" \
    --count 1 \
    --instance-type "${instance_type}" \
    --key-name "${key_pair_name}" \
    --security-group-ids "${web_security_group_id}" \
    --subnet-id "${web_subnet_id}" \
    --query 'Instances[*].InstanceId' \
    --output text)

aws ec2 wait instance-running --instance-ids "${web_ec2_id}"

echo "exam_web_ec2_id=${web_ec2_id}" >>"${state_file}"

web_ec2_public_ip=$(aws ec2 describe-instances --instance-ids "${web_ec2_id}" --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
echo "exam_web_ec2_public_ip=${web_ec2_public_ip}" >>"${state_file}"

declare db_ec2_id
db_ec2_id=$(aws ec2 run-instances \
    --image-id "${image_id}" \
    --count 1 \
    --instance-type "${instance_type}" \
    --key-name "${key_pair_name}" \
    --security-group-ids "${private_security_group_id}" \
    --subnet-id "${private_subnet_id}" \
    --query 'Instances[*].InstanceId' \
    --output text)

aws ec2 wait instance-running --instance-ids "${db_ec2_id}"

echo "exam_db_ec2_id=${db_ec2_id}" >>"${state_file}"

db_ec2_private_ip=$(aws ec2 describe-instances --instance-ids "${db_ec2_id}" --query 'Reservations[*].Instances[*].PrivateIpAddress' --output text)
echo "exam_db_ec2_private_ip=${db_ec2_private_ip}" >>"${state_file}"
